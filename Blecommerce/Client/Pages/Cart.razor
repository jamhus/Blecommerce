@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
@implements IDisposable

<MudText Class="mb-10" Typo="Typo.h3">
    Shopping cart
</MudText>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <MudText Typo="Typo.h5">
        @message
    </MudText>
}
else if(orderCreated == true)
{
    <center>
        <MudText Typo="Typo.h5">
           Thanks! your order has been placed. You can check your orders <a href="/orders" >here</a>
        </MudText>
    </center>
} 
else
{
    <MudTable Class="mb-10" Items="cartProducts"
          Hover="true" Elevation="1">
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Image</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Price</MudTh>
            <MudTh></MudTh>

        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">
                @context.Title
            </MudTd>
            <MudTd>
                <MudNumericField Value="context.Quantity" ValueChanged="@((int val) => UpdateQuantity(val,context))" Variant="Variant.Text" Min="1" Style="width:50px" />
            </MudTd>
            <MudTd DataLabel="Image">
                <MudAvatar Style="height:60px; width:60px;" Image=@context.ImageUrl />
            </MudTd>
            <MudTd DataLabel="Type">@context.ProductType</MudTd>

            <MudTd DataLabel="Price">$@(context.Price * context.Quantity)</MudTd>
            <MudTd DataLabel="Delete">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="(e)=> DeleteFromCart(context)" Color="Color.Error" />
            </MudTd>
        </RowTemplate>
    </MudTable>

     <MudGrid>
        <MudItem xs="0" md="9">
            <div></div>
        </MudItem>
        <MudItem xs="12" md="3">
            <MudCard>
        <MudList Clickable="true">
            <MudListItem Icon="@Icons.Filled.AttachMoney">
                <MudText Typo="Typo.subtitle1">
                    Total (@cartProducts.Sum(i=>i.Quantity)): $@cartProducts.Sum(p => p.Price * p.Quantity)
                </MudText>
            </MudListItem>
            <MudDivider />

            <MudListItem Icon="@Icons.Material.Filled.Send">
                <MudButton OnClick="AddOrder" FullWidth="true" Variant="Variant.Outlined" Color="Color.Secondary">
                    Order
                </MudButton>
            </MudListItem>

        </MudList>
    </MudCard>
        </MudItem>
    </MudGrid>

    


}

@code {
    List<CartProductDto> cartProducts = null;

    string message = "Loading cart...";

    bool orderCreated = false;

    protected override async Task OnInitializedAsync()
    {
        orderCreated = false;
        CartService.OnChange += StateHasChanged;
        await LoadCart();
    }

    private async void DeleteFromCart(CartProductDto item)
    {
        await CartService.RemoveProductFromCart(item.ProductId, item.ProductTypeId);
        await LoadCart();
        StateHasChanged();

    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();
        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty.";
            cartProducts = new List<CartProductDto>();
        }
    }

    private async Task UpdateQuantity(int value, CartProductDto product)
    {
        product.Quantity = value;
        if (product.Quantity < 1)
        {
            product.Quantity = 1;
        }
        await CartService.UpdateQuantity(product);
    }

    private async Task AddOrder ()
    {
        await OrderService.AddOrder();
        await CartService.GetCartItemsCount();
        orderCreated = true;
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
    }

}
