@page "/product/{id:int}"
@inject IProductService ProductSerivce
@inject ICartService CartService

@if (product == null)
{
    <span>@message</span>
}
else
{
    <MudPaper>
        <MudCard Class="d-flex flex-lg-row">
            <MudImage ObjectPosition="@ObjectPosition.Center" Src=@product.ImageUrl Width="350" Height="350" Alt=@product.Title Elevation="25" Class="rounded-lg details-img-margin" />
            <MudCardContent Class="d-flex flex-column justify-content-around w-sm-100">
                <MudText Class="mb-5" Typo="Typo.h5">@product.Title</MudText>
                <MudText Class="mb-16" Typo="Typo.body2">@product.Description</MudText>

                @if (product.Variants != null && product.Variants.Count > 1)
                {
                    <MudSelect @bind-Value="currentTypeId" T="int" Label="Variant" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var item in product.Variants)
                        {
                            <MudSelectItem T="int" Value=@item.ProductTypeId> @item.ProductType.Name - $@item.Price </MudSelectItem>

                        }
                    </MudSelect>
                }
                <MudText>

                    @if (GetSelectedVariant() != null)
                    {
                        @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
                        {
                            <MudText Class="mt-auto disabled-text" Style="@($"color:{Colors.Grey.Darken1};")" Typo="Typo.h6">$@GetSelectedVariant().OriginalPrice</MudText>
                        }
                        <MudText Class="mt-auto" Color="Color.Success" Typo="Typo.h4">$@GetSelectedVariant().Price</MudText>

                    }

                </MudText>
                <MudIconButton Icon="@Icons.Material.Filled.AddShoppingCart" Variant="Variant.Filled" Color="Color.Secondary" OnClick="@((e) => AddToCart())"  Style="width:40px" />
            </MudCardContent>
        </MudCard>
    </MudPaper>
}

@code {
    private Product? product = null;
    private string message = String.Empty;
    private int currentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        message = "Loading Product...";
        var result = await ProductSerivce.GetProduct(Id);

        if (!result.Success)
        {
            message = result.Message;
        }
        else
        {
            product = result.Data;
            if (product!.Variants.Count > 0)
            {
                currentTypeId = product.Variants[0].ProductTypeId;
            }
        }
    }

    private ProductVariant GetSelectedVariant()
    {
        var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
        return variant;
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();
        var cartItem = new CartItem
            {
                ProductId = productVariant.ProductId,
                ProductTypeId = productVariant.ProductTypeId
            };
        await CartService.AddToCart(cartItem);
    }
}
